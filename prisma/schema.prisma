datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  mobile      String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  firstname   String
  lastname    String
  sex         String
  dob         DateTime
  nationality String
  address     String?
  password    Password?
  Reservation Reservation[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Guest {
  id           String         @id @default(cuid())
  firstname    String
  lastName     String
  mobile       String?
  email        String?
  RoomReserved RoomReserved[]
}

model Location {
  id          String     @id @default(cuid())
  name        String     @unique
  lat         Float
  long        Float
  altitude    Int
  description String
  Homestay    Homestay[]
}

model Homestay {
  id                String              @id @default(cuid())
  name              String
  address           String
  location          Location            @relation(fields: [locationName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  locationName      String
  Rooms             Room[]
  Reservation       Reservation[]
  HomestayAmenities HomestayAmenities[]
  HomestayGallery   HomestayGallery[]
}

model Room {
  id              String         @id @default(cuid())
  name            String
  category        String
  maxOccupancy    Int
  toiletAttached  Boolean
  airConditioned  Boolean
  kitchenAttached Boolean
  isDorm          Boolean
  homestay        Homestay       @relation(fields: [homestayId], references: [id])
  homestayId      String
  Rate            Rate[]
  RoomReserved    RoomReserved[]
  RoomFeatures    RoomFeatures[]
  RoomGallery     RoomGallery[]
}

model Rate {
  id         String  @id @default(cuid())
  headCount  Int
  tariff     Int
  refundable Boolean
  room       Room    @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId     String
}

model FoodPlan {
  id           String         @id @default(cuid())
  type         String
  tariff       Decimal
  RoomReserved RoomReserved[]
}

model Reservation {
  id          String   @id @default(cuid())
  createdAt   DateTime
  modifiedAt  DateTime
  dateIn      DateTime
  dateOut     DateTime
  totalAmount Decimal
  dueAmount   Decimal
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  homestay    Homestay @relation(fields: [homestayId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  homestayId  String
}

model RoomReserved {
  id           String   @id @default(cuid())
  pax          Int
  amount       Decimal
  status       String
  primaryGuest Guest    @relation(fields: [guestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  guestId      String
  room         Room     @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId       String
  foodPlan     FoodPlan @relation(fields: [foodPlanId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  foodPlanId   String
}

model Amenity {
  id                String              @id @default(cuid())
  name              String
  description       String?
  HomestayAmenities HomestayAmenities[]
}

model Feature {
  id           String         @id @default(cuid())
  name         String
  description  String?
  RoomFeatures RoomFeatures[]
}

model HomestayAmenities {
  homestay   Homestay @relation(fields: [homestayId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  homestayId String
  amenity    Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  amenityId  String

  @@unique([homestayId, amenityId])
}

model RoomFeatures {
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId    String
  feature   Feature @relation(fields: [featureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  featureId String

  @@unique([roomId, featureId])
}

model HomestayGallery {
  url         String   @id
  category    String
  description String?
  homestay    Homestay @relation(fields: [homestayId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  homestayId  String
}

model RoomGallery {
  url         String  @id
  category    String
  description String?
  room        Room    @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId      String
}
